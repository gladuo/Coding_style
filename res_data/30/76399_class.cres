SHARP	#	0	0	0	0	0
T_INCLUDE	include	0	0	0	0	0
O_LT	<	0	0	-1	0	0
V_IFILE	stdio.h	0	0	0	0	0
O_GT	>	0	0	0	0	0
T_INT	int	0	1	0	1	0
V_ID	main	1	0	1	0	0
LPARENT	(	0	0	0	0	0
T_VOID	void	0	0	0	0	0
RPARENT	)	0	0	0	0	0
LCURLYB	{	0	1	-1	-1	0
T_INT	int	4	1	0	1	1
V_ID	i	1	0	1	0	1
COMMA	,	0	0	0	0	1
V_ID	n	0	0	1	0	1
COMMA	,	0	0	0	0	1
V_ID	a	0	0	1	0	1
COMMA	,	0	0	0	0	1
V_ID	b	0	0	1	0	1
COMMA	,	0	0	0	0	1
V_ID	l	0	0	1	0	1
COMMA	,	0	0	0	0	1
V_ID	c	0	0	1	0	1
COMMA	,	0	0	0	0	1
V_ID	d	0	0	1	0	1
COMMA	,	0	0	0	0	1
V_ID	e	0	0	1	0	1
COMMA	,	0	0	0	0	1
V_ID	f	0	0	1	0	1
SEMICOLON	;	0	0	0	0	1
T_WHILE	while	4	1	1	1	1
LPARENT	(	0	0	1	0	1
V_ID	scanf	0	0	0	0	1
LPARENT	(	0	0	0	0	1
V_STRING	"%d"	0	0	0	0	1
COMMA	,	0	0	0	0	1
O_BAND	&	0	0	1	0	1
V_ID	n	0	0	0	0	1
RPARENT	)	0	0	0	0	1
O_NE	!=	0	0	1	0	1
V_ID	EOF	0	0	1	0	1
RPARENT	)	0	0	0	0	1
LCURLYB	{	4	1	-1	-1	1
V_ID	a	8	1	0	1	2
ASSIGN	=	0	0	1	0	2
V_INTEGER	0	0	0	1	0	2
SEMICOLON	;	0	0	0	0	2
T_FOR	for	8	1	1	1	2
LPARENT	(	0	0	1	0	2
V_ID	i	0	0	0	0	2
ASSIGN	=	0	0	1	0	2
V_INTEGER	1	0	0	1	0	2
SEMICOLON	;	0	0	0	0	2
V_ID	i	0	0	1	-1	2
O_LT	<	0	0	1	0	2
V_ID	n	0	0	1	0	2
SEMICOLON	;	0	0	0	0	2
V_ID	i	0	0	1	-1	2
O_SADD	++	0	0	0	0	2
RPARENT	)	0	0	0	0	2
LCURLYB	{	8	1	-1	-1	2
T_IF	if	12	1	0	1	3
LPARENT	(	0	0	1	0	3
V_ID	i	0	0	0	0	3
O_MOD	%	0	0	1	0	3
V_INTEGER	7	0	0	1	0	3
O_EQ	==	0	0	1	0	3
V_INTEGER	0	0	0	1	0	3
RPARENT	)	0	0	0	0	3
V_ID	a	12	1	-1	-1	4
O_SADD	++	0	0	0	0	4
SEMICOLON	;	0	0	0	0	4
T_IF	if	11	1	1	1	3
LPARENT	(	0	0	1	0	3
V_ID	i	0	0	0	0	3
O_LT	<	0	0	1	0	3
V_INTEGER	10	0	0	1	0	3
RPARENT	)	0	0	0	0	3
LCURLYB	{	11	1	-1	-1	3
T_IF	if	13	1	0	1	4
LPARENT	(	0	0	1	0	4
V_ID	i	0	0	0	0	4
O_EQ	==	0	0	1	0	4
V_INTEGER	7	0	0	1	0	4
RPARENT	)	0	0	0	0	4
V_ID	a	13	1	-1	-1	5
O_SADD	++	0	0	0	0	5
SEMICOLON	;	0	0	0	0	5
RCURLYB	}	11	1	1	1	3
T_ELSE	else	11	1	-1	-1	3
T_IF	if	1	0	1	-1	4
LPARENT	(	0	0	1	0	4
V_ID	i	0	0	0	0	4
O_GT	>	0	0	1	0	4
V_INTEGER	9	0	0	1	0	4
O_AND	&&	0	0	1	0	4
V_ID	i	0	0	1	0	4
O_LT	<	0	0	1	0	4
V_INTEGER	100	0	0	1	0	4
RPARENT	)	0	0	0	0	4
LCURLYB	{	11	1	-1	-1	4
V_ID	b	15	1	0	1	5
ASSIGN	=	0	0	1	0	5
LPARENT	(	0	0	1	0	5
V_ID	i	0	0	0	0	5
O_DIV	/	0	0	1	0	5
V_INTEGER	10	0	0	1	0	5
RPARENT	)	0	0	0	0	5
SEMICOLON	;	0	0	0	0	5
V_ID	c	15	1	1	1	5
ASSIGN	=	0	0	1	0	5
V_ID	i	0	0	1	0	5
O_SUB	-	0	0	1	0	5
V_ID	b	0	0	1	0	5
O_MUL	*	0	0	1	0	5
V_INTEGER	10	0	0	1	0	5
SEMICOLON	;	0	0	0	0	5
T_IF	if	15	1	1	1	5
LPARENT	(	0	0	1	0	5
V_ID	b	0	0	0	0	5
O_EQ	==	0	0	1	0	5
V_INTEGER	7	0	0	1	0	5
O_OR	||	0	0	1	0	5
V_ID	c	0	0	1	0	5
O_EQ	==	0	0	1	0	5
V_INTEGER	7	0	0	1	0	5
RPARENT	)	0	0	0	0	5
V_ID	a	15	1	-1	-1	6
O_SADD	++	0	0	0	0	6
SEMICOLON	;	0	0	0	0	6
RCURLYB	}	11	1	1	1	4
T_ELSE	else	11	1	-1	-1	4
T_IF	if	1	0	1	-1	5
LPARENT	(	0	0	1	0	5
V_ID	i	0	0	0	0	5
O_GT	>	0	0	1	0	5
V_INTEGER	99	0	0	1	0	5
O_AND	&&	0	0	1	0	5
V_ID	i	0	0	1	0	5
O_LT	<	0	0	1	0	5
V_INTEGER	1000	0	0	1	0	5
RPARENT	)	0	0	0	0	5
LCURLYB	{	11	1	-1	-1	5
V_ID	b	15	1	0	1	6
ASSIGN	=	0	0	1	0	6
LPARENT	(	0	0	1	0	6
V_ID	i	0	0	0	0	6
O_DIV	/	0	0	1	0	6
V_INTEGER	100	0	0	1	0	6
RPARENT	)	0	0	0	0	6
SEMICOLON	;	0	0	0	0	6
V_ID	c	15	1	1	1	6
ASSIGN	=	0	0	1	0	6
LPARENT	(	0	0	1	0	6
V_ID	i	0	0	0	0	6
O_SUB	-	0	0	1	0	6
V_ID	b	0	0	1	0	6
O_MUL	*	0	0	1	0	6
V_INTEGER	100	0	0	1	0	6
RPARENT	)	0	0	0	0	6
O_DIV	/	0	0	1	0	6
V_INTEGER	10	0	0	1	0	6
SEMICOLON	;	0	0	0	0	6
V_ID	d	15	1	1	1	6
ASSIGN	=	0	0	1	0	6
V_ID	i	0	0	1	0	6
O_SUB	-	0	0	1	0	6
V_ID	b	0	0	1	0	6
O_MUL	*	0	0	1	0	6
V_INTEGER	100	0	0	1	0	6
O_SUB	-	0	0	1	0	6
V_ID	c	0	0	1	0	6
O_MUL	*	0	0	1	0	6
V_INTEGER	10	0	0	1	0	6
SEMICOLON	;	0	0	0	0	6
T_IF	if	15	1	1	1	6
LPARENT	(	0	0	1	0	6
V_ID	b	0	0	0	0	6
O_EQ	==	0	0	1	0	6
V_INTEGER	7	0	0	1	0	6
O_OR	||	0	0	1	0	6
V_ID	c	0	0	1	0	6
O_EQ	==	0	0	1	0	6
V_INTEGER	7	0	0	1	0	6
O_OR	||	0	0	1	0	6
V_ID	d	0	0	1	0	6
O_EQ	==	0	0	1	0	6
V_INTEGER	7	0	0	1	0	6
RPARENT	)	0	0	0	0	6
V_ID	a	15	1	-1	-1	7
O_SADD	++	0	0	0	0	7
SEMICOLON	;	0	0	0	0	7
RCURLYB	}	11	1	1	1	5
T_ELSE	else	11	1	-1	-1	5
T_IF	if	1	0	1	-1	6
LPARENT	(	0	0	1	0	6
V_ID	i	0	0	0	0	6
O_GT	>	0	0	1	0	6
V_INTEGER	999	0	0	1	0	6
O_AND	&&	0	0	1	0	6
V_ID	i	0	0	1	0	6
O_LT	<	0	0	1	0	6
V_INTEGER	10000	0	0	1	0	6
RPARENT	)	0	0	0	0	6
LCURLYB	{	11	1	-1	-1	6
V_ID	b	16	1	0	1	7
ASSIGN	=	0	0	1	0	7
LPARENT	(	0	0	1	0	7
V_ID	i	0	0	0	0	7
O_DIV	/	0	0	1	0	7
V_INTEGER	1000	0	0	1	0	7
RPARENT	)	0	0	0	0	7
SEMICOLON	;	0	0	0	0	7
V_ID	c	15	1	1	1	7
ASSIGN	=	0	0	1	0	7
LPARENT	(	0	0	1	0	7
V_ID	i	0	0	0	0	7
O_SUB	-	0	0	1	0	7
V_ID	b	0	0	1	0	7
O_MUL	*	0	0	1	0	7
V_INTEGER	1000	0	0	1	0	7
RPARENT	)	0	0	0	0	7
O_DIV	/	0	0	1	0	7
V_INTEGER	100	0	0	1	0	7
SEMICOLON	;	0	0	0	0	7
V_ID	d	15	1	1	1	7
ASSIGN	=	0	0	1	0	7
LPARENT	(	0	0	1	0	7
V_ID	i	0	0	0	0	7
O_SUB	-	0	0	1	0	7
V_ID	b	0	0	1	0	7
O_MUL	*	0	0	1	0	7
V_INTEGER	1000	0	0	1	0	7
O_SUB	-	0	0	1	0	7
V_ID	c	0	0	1	0	7
O_MUL	*	0	0	1	0	7
V_INTEGER	100	0	0	1	0	7
RPARENT	)	0	0	0	0	7
O_DIV	/	0	0	1	0	7
V_INTEGER	10	0	0	1	0	7
SEMICOLON	;	0	0	0	0	7
V_ID	e	15	1	1	1	7
ASSIGN	=	0	0	1	0	7
LPARENT	(	0	0	1	0	7
V_ID	i	0	0	0	0	7
O_SUB	-	0	0	1	0	7
V_ID	b	0	0	1	0	7
O_MUL	*	0	0	1	0	7
V_INTEGER	1000	0	0	1	0	7
O_SUB	-	0	0	1	0	7
V_ID	c	0	0	1	0	7
O_MUL	*	0	0	1	0	7
V_INTEGER	100	0	0	1	0	7
O_SUB	-	0	0	1	0	7
V_ID	d	0	0	1	0	7
O_MUL	*	0	0	1	0	7
V_INTEGER	10	0	0	1	0	7
RPARENT	)	0	0	0	0	7
SEMICOLON	;	0	0	0	0	7
T_IF	if	15	1	1	1	7
LPARENT	(	0	0	1	0	7
V_ID	b	0	0	0	0	7
O_EQ	==	0	0	1	0	7
V_INTEGER	7	0	0	1	0	7
O_OR	||	0	0	1	0	7
V_ID	c	0	0	1	0	7
O_EQ	==	0	0	1	0	7
V_INTEGER	7	0	0	1	0	7
O_OR	||	0	0	1	0	7
V_ID	d	0	0	1	0	7
O_EQ	==	0	0	1	0	7
V_INTEGER	7	0	0	1	0	7
O_OR	||	0	0	1	0	7
V_ID	e	0	0	1	0	7
O_EQ	==	0	0	1	0	7
V_INTEGER	7	0	0	1	0	7
RPARENT	)	0	0	0	0	7
V_ID	a	15	1	-1	-1	8
O_SADD	++	0	0	0	0	8
SEMICOLON	;	0	0	0	0	8
RCURLYB	}	11	1	1	1	6
T_IF	if	11	1	-1	1	3
LPARENT	(	0	0	1	0	3
V_ID	a	0	0	0	0	3
O_EQ	==	0	0	1	0	3
V_INTEGER	2	0	0	1	0	3
RPARENT	)	0	0	0	0	3
V_ID	printf	11	1	-1	-1	4
LPARENT	(	0	0	0	0	4
V_STRING	"%d\n"	0	0	0	0	4
COMMA	,	0	0	0	0	4
V_ID	i	0	0	1	0	4
RPARENT	)	0	0	0	0	4
SEMICOLON	;	0	0	0	0	4
RCURLYB	}	8	1	1	1	2
RCURLYB	}	4	1	-1	1	1
T_RETURN	return	4	1	-1	1	1
V_INTEGER	0	1	0	1	0	1
SEMICOLON	;	0	0	0	0	1
RCURLYB	}	0	1	1	1	0

SHARP	#	0	0	0	0	0
T_INCLUDE	include	0	0	0	0	0
O_LT	<	1	0	-1	0	0
V_IFILE	stdio.h	0	0	0	0	0
O_GT	>	0	0	0	0	0
SHARP	#	0	1	0	1	0
T_INCLUDE	include	0	0	0	0	0
O_LT	<	1	0	-1	0	0
V_IFILE	math.h	0	0	0	0	0
O_GT	>	0	0	0	0	0
T_INT	int	0	1	0	1	0
V_ID	main	1	0	1	0	0
LPARENT	(	0	0	0	0	0
RPARENT	)	0	0	0	0	0
LCURLYB	{	0	0	-1	-1	0
T_INT	int	4	1	0	1	1
V_ID	arr	1	0	1	0	1
LSQUAREB	[	0	0	0	0	1
V_INTEGER	10001	0	0	0	0	1
RSQUAREB	]	0	0	0	0	1
SEMICOLON	;	0	0	0	0	1
T_INT	int	4	1	1	1	1
V_ID	sum	1	0	1	0	1
ASSIGN	=	1	0	1	0	1
V_INTEGER	0	1	0	1	0	1
COMMA	,	0	0	0	0	1
V_ID	N	1	0	1	0	1
COMMA	,	0	0	0	0	1
V_ID	i	1	0	1	0	1
COMMA	,	0	0	0	0	1
V_ID	j	1	0	1	0	1
SEMICOLON	;	0	0	0	0	1
V_ID	scanf	4	1	1	1	1
LPARENT	(	0	0	0	0	1
V_STRING	"%d"	0	0	0	0	1
COMMA	,	0	0	0	0	1
O_BAND	&	1	0	1	0	1
V_ID	N	0	0	0	0	1
RPARENT	)	0	0	0	0	1
SEMICOLON	;	0	0	0	0	1
T_IF	if	4	1	1	1	1
LPARENT	(	0	0	1	0	1
V_ID	N	0	0	0	0	1
O_GT	>	1	0	1	0	1
V_INTEGER	1	1	0	1	0	1
O_AND	&&	1	0	1	0	1
V_ID	N	1	0	1	0	1
O_LE	<=	1	0	1	0	1
V_INTEGER	10000	1	0	1	0	1
RPARENT	)	0	0	0	0	1
LCURLYB	{	0	0	-1	-1	1
T_FOR	for	8	1	0	1	2
LPARENT	(	0	0	1	0	2
V_ID	i	0	0	0	0	2
ASSIGN	=	1	0	1	0	2
V_INTEGER	2	1	0	1	0	2
SEMICOLON	;	0	0	0	0	2
V_ID	i	1	0	1	-1	2
O_LE	<=	1	0	1	0	2
V_ID	N	1	0	1	0	2
SEMICOLON	;	0	0	0	0	2
V_ID	i	1	0	1	-1	2
O_SADD	++	0	0	0	0	2
RPARENT	)	0	0	0	0	2
LCURLYB	{	0	0	-1	-1	2
T_FOR	for	12	1	0	1	3
LPARENT	(	0	0	1	0	3
V_ID	j	0	0	0	0	3
ASSIGN	=	1	0	1	0	3
V_INTEGER	2	1	0	1	0	3
SEMICOLON	;	0	0	0	0	3
V_ID	j	1	0	1	-1	3
O_LT	<	1	0	1	0	3
V_ID	sqrt	1	0	1	0	3
LPARENT	(	0	0	0	0	3
V_ID	i	0	0	0	0	3
RPARENT	)	0	0	0	0	3
O_ADD	+	1	0	1	0	3
V_INTEGER	1	1	0	1	0	3
SEMICOLON	;	0	0	0	0	3
V_ID	j	1	0	1	-1	3
O_SADD	++	0	0	0	0	3
RPARENT	)	0	0	0	0	3
LCURLYB	{	0	0	-1	-1	3
T_IF	if	16	1	0	1	4
LPARENT	(	0	0	1	0	4
V_ID	i	0	0	0	0	4
O_MOD	%	1	0	1	0	4
V_ID	j	1	0	1	0	4
O_EQ	==	1	0	1	0	4
V_INTEGER	0	1	0	1	0	4
O_AND	&&	1	0	1	0	4
V_ID	i	1	0	1	0	4
O_NE	!=	1	0	1	0	4
V_ID	j	1	0	1	0	4
RPARENT	)	0	0	0	0	4
LCURLYB	{	0	0	-1	-1	4
V_ID	arr	20	1	0	1	5
LSQUAREB	[	0	0	0	0	5
V_ID	i	0	0	0	0	5
RSQUAREB	]	0	0	0	0	5
ASSIGN	=	1	0	1	0	5
V_INTEGER	1	1	0	1	0	5
SEMICOLON	;	0	0	0	0	5
V_ID	break	20	1	1	1	5
SEMICOLON	;	0	0	0	0	5
RCURLYB	}	16	1	1	1	4
RCURLYB	}	12	1	-1	1	3
T_IF	if	12	1	-1	1	3
LPARENT	(	0	0	1	0	3
V_ID	arr	0	0	0	0	3
LSQUAREB	[	0	0	0	0	3
V_ID	i	0	0	0	0	3
RSQUAREB	]	0	0	0	0	3
O_EQ	==	1	0	1	0	3
V_INTEGER	0	1	0	1	0	3
O_AND	&&	1	0	1	0	3
V_ID	i	1	0	1	0	3
O_NE	!=	1	0	1	0	3
V_INTEGER	1	1	0	1	0	3
RPARENT	)	0	0	0	0	3
LCURLYB	{	0	0	-1	-1	3
V_ID	printf	16	1	0	1	4
LPARENT	(	0	0	0	0	4
V_STRING	"%d\n"	0	0	0	0	4
COMMA	,	0	0	0	0	4
V_ID	i	1	0	1	0	4
RPARENT	)	0	0	0	0	4
SEMICOLON	;	0	0	0	0	4
RCURLYB	}	12	1	1	1	3
RCURLYB	}	8	1	-1	1	2
RCURLYB	}	4	1	-1	1	1
T_RETURN	return	4	1	-1	1	1
V_INTEGER	0	1	0	1	0	1
SEMICOLON	;	0	0	0	0	1
RCURLYB	}	0	1	1	1	0

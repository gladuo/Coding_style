SHARP	#	0	0	0	0	0
T_INCLUDE	include	0	0	0	0	0
O_LT	<	0	0	-1	0	0
V_IFILE	stdio.h	0	0	0	0	0
O_GT	>	0	0	0	0	0
T_STRUCT	struct	0	1	0	1	0
V_ID	student	1	0	1	0	0
LCURLYB	{	1	0	-1	-1	0
T_INT	int	0	0	0	1	1
V_ID	l	1	0	1	0	1
SEMICOLON	;	0	0	0	0	1
T_INT	int	0	0	1	1	1
V_ID	w	1	0	1	0	1
SEMICOLON	;	0	0	0	0	1
T_INT	int	0	0	1	1	1
V_ID	h	1	0	1	0	1
SEMICOLON	;	0	0	0	0	1
T_INT	int	0	0	1	1	1
V_ID	have	1	0	1	0	1
SEMICOLON	;	0	0	0	0	1
T_CHAR	char	0	0	1	1	1
V_ID	name	1	0	1	0	1
LSQUAREB	[	0	0	0	0	1
V_INTEGER	9	0	0	0	0	1
RSQUAREB	]	0	0	0	0	1
SEMICOLON	;	0	0	0	0	1
RCURLYB	}	0	0	1	1	0
V_ID	stu	1	0	-1	-1	0
LSQUAREB	[	0	0	0	0	0
V_INTEGER	10	0	0	0	0	0
RSQUAREB	]	0	0	0	0	0
SEMICOLON	;	0	0	0	0	0
T_VOID	void	0	1	1	1	0
V_ID	fun	1	0	1	0	0
LPARENT	(	0	0	0	0	0
T_INT	int	0	0	0	0	0
V_ID	n	1	0	1	0	0
RPARENT	)	0	0	0	0	0
LCURLYB	{	0	0	-1	-1	0
T_INT	int	4	1	0	1	1
V_ID	ave	1	0	1	0	1
ASSIGN	=	0	0	1	0	1
V_INTEGER	0	0	0	1	0	1
SEMICOLON	;	0	0	0	0	1
T_INT	int	0	0	1	1	1
V_ID	more	1	0	1	0	1
ASSIGN	=	1	0	1	0	1
V_INTEGER	0	1	0	1	0	1
SEMICOLON	;	0	0	0	0	1
T_INT	int	0	0	1	1	1
V_ID	less	1	0	1	0	1
ASSIGN	=	1	0	1	0	1
V_INTEGER	0	1	0	1	0	1
SEMICOLON	;	0	0	0	0	1
T_INT	int	4	1	1	1	1
V_ID	i	1	0	1	0	1
SEMICOLON	;	0	0	0	0	1
T_FOR	for	4	1	1	1	1
LPARENT	(	0	0	1	0	1
V_ID	i	0	0	0	0	1
ASSIGN	=	1	0	1	0	1
V_INTEGER	0	1	0	1	0	1
SEMICOLON	;	0	0	0	0	1
V_ID	i	0	0	1	-1	1
O_LT	<	1	0	1	0	1
V_ID	n	1	0	1	0	1
SEMICOLON	;	0	0	0	0	1
V_ID	i	0	0	1	-1	1
O_SADD	++	0	0	0	0	1
RPARENT	)	0	0	0	0	1
LCURLYB	{	0	0	-1	-1	1
V_ID	scanf	8	1	0	1	2
LPARENT	(	0	0	0	0	2
V_STRING	"%d%d%d%s"	0	0	0	0	2
COMMA	,	0	0	0	0	2
O_BAND	&	0	0	1	0	2
V_ID	stu	0	0	0	0	2
LSQUAREB	[	0	0	0	0	2
V_ID	i	0	0	0	0	2
RSQUAREB	]	0	0	0	0	2
PERIOD	.	0	0	0	0	2
V_ID	l	0	0	0	0	2
COMMA	,	0	0	0	0	2
O_BAND	&	0	0	1	0	2
V_ID	stu	0	0	0	0	2
LSQUAREB	[	0	0	0	0	2
V_ID	i	0	0	0	0	2
RSQUAREB	]	0	0	0	0	2
PERIOD	.	0	0	0	0	2
V_ID	w	0	0	0	0	2
COMMA	,	0	0	0	0	2
O_BAND	&	0	0	1	0	2
V_ID	stu	0	0	0	0	2
LSQUAREB	[	0	0	0	0	2
V_ID	i	0	0	0	0	2
RSQUAREB	]	0	0	0	0	2
PERIOD	.	0	0	0	0	2
V_ID	h	0	0	0	0	2
COMMA	,	0	0	0	0	2
O_BAND	&	0	0	1	0	2
V_ID	stu	0	0	0	0	2
LSQUAREB	[	0	0	0	0	2
V_ID	i	0	0	0	0	2
RSQUAREB	]	0	0	0	0	2
PERIOD	.	0	0	0	0	2
V_ID	name	0	0	0	0	2
RPARENT	)	0	0	0	0	2
SEMICOLON	;	0	0	0	0	2
V_ID	stu	8	1	1	1	2
LSQUAREB	[	0	0	0	0	2
V_ID	i	0	0	0	0	2
RSQUAREB	]	0	0	0	0	2
PERIOD	.	0	0	0	0	2
V_ID	have	0	0	0	0	2
ASSIGN	=	1	0	1	0	2
V_ID	stu	1	0	1	0	2
LSQUAREB	[	0	0	0	0	2
V_ID	i	0	0	0	0	2
RSQUAREB	]	0	0	0	0	2
PERIOD	.	0	0	0	0	2
V_ID	l	0	0	0	0	2
O_MUL	*	0	0	1	0	2
V_ID	stu	0	0	1	0	2
LSQUAREB	[	0	0	0	0	2
V_ID	i	0	0	0	0	2
RSQUAREB	]	0	0	0	0	2
PERIOD	.	0	0	0	0	2
V_ID	w	0	0	0	0	2
O_MUL	*	0	0	1	0	2
V_ID	stu	0	0	1	0	2
LSQUAREB	[	0	0	0	0	2
V_ID	i	0	0	0	0	2
RSQUAREB	]	0	0	0	0	2
PERIOD	.	0	0	0	0	2
V_ID	h	0	0	0	0	2
SEMICOLON	;	0	0	0	0	2
V_ID	ave	8	1	1	1	2
A_ADD	+=	1	0	1	0	2
V_ID	stu	1	0	1	0	2
LSQUAREB	[	0	0	0	0	2
V_ID	i	0	0	0	0	2
RSQUAREB	]	0	0	0	0	2
PERIOD	.	0	0	0	0	2
V_ID	have	0	0	0	0	2
SEMICOLON	;	0	0	0	0	2
RCURLYB	}	4	1	1	1	1
V_ID	ave	4	1	-1	1	1
A_DIV	/=	1	0	1	0	1
V_ID	n	1	0	1	0	1
SEMICOLON	;	0	0	0	0	1
T_FOR	for	4	1	1	1	1
LPARENT	(	0	0	1	0	1
V_ID	i	0	0	0	0	1
ASSIGN	=	1	0	1	0	1
V_INTEGER	0	1	0	1	0	1
SEMICOLON	;	0	0	0	0	1
V_ID	i	0	0	1	-1	1
O_LT	<	1	0	1	0	1
V_ID	n	1	0	1	0	1
SEMICOLON	;	0	0	0	0	1
V_ID	i	0	0	1	-1	1
O_SADD	++	0	0	0	0	1
RPARENT	)	0	0	0	0	1
LCURLYB	{	0	0	-1	-1	1
T_IF	if	8	1	0	1	2
LPARENT	(	0	0	1	0	2
V_ID	stu	0	0	0	0	2
LSQUAREB	[	0	0	0	0	2
V_ID	i	0	0	0	0	2
RSQUAREB	]	0	0	0	0	2
PERIOD	.	0	0	0	0	2
V_ID	have	0	0	0	0	2
O_GT	>	1	0	1	0	2
V_ID	ave	1	0	1	0	2
RPARENT	)	0	0	0	0	2
LCURLYB	{	0	0	-1	-1	2
V_ID	more	12	1	0	1	3
ASSIGN	=	1	0	1	0	3
V_ID	i	1	0	1	0	3
SEMICOLON	;	0	0	0	0	3
RCURLYB	}	8	1	1	1	2
T_IF	if	8	1	-1	1	2
LPARENT	(	0	0	1	0	2
V_ID	stu	0	0	0	0	2
LSQUAREB	[	0	0	0	0	2
V_ID	i	0	0	0	0	2
RSQUAREB	]	0	0	0	0	2
PERIOD	.	0	0	0	0	2
V_ID	have	0	0	0	0	2
O_LT	<	1	0	1	0	2
V_ID	ave	1	0	1	0	2
RPARENT	)	0	0	0	0	2
LCURLYB	{	0	0	-1	-1	2
V_ID	less	12	1	0	1	3
ASSIGN	=	1	0	1	0	3
V_ID	i	1	0	1	0	3
SEMICOLON	;	0	0	0	0	3
RCURLYB	}	8	1	1	1	2
RCURLYB	}	4	1	-1	1	1
V_ID	printf	4	1	-1	1	1
LPARENT	(	0	0	0	0	1
V_STRING	"%s took clay from %s.\n"	0	0	0	0	1
COMMA	,	0	0	0	0	1
V_ID	stu	0	0	1	0	1
LSQUAREB	[	0	0	0	0	1
V_ID	more	0	0	0	0	1
RSQUAREB	]	0	0	0	0	1
PERIOD	.	0	0	0	0	1
V_ID	name	0	0	0	0	1
COMMA	,	0	0	0	0	1
V_ID	stu	0	0	1	0	1
LSQUAREB	[	0	0	0	0	1
V_ID	less	0	0	0	0	1
RSQUAREB	]	0	0	0	0	1
PERIOD	.	0	0	0	0	1
V_ID	name	0	0	0	0	1
RPARENT	)	0	0	0	0	1
SEMICOLON	;	0	0	0	0	1
V_ID	scanf	4	1	1	1	1
LPARENT	(	0	0	0	0	1
V_STRING	"%d"	0	0	0	0	1
COMMA	,	0	0	0	0	1
O_BAND	&	0	0	1	0	1
V_ID	n	0	0	0	0	1
RPARENT	)	0	0	0	0	1
SEMICOLON	;	0	0	0	0	1
T_IF	if	4	1	1	1	1
LPARENT	(	0	0	1	0	1
V_ID	n	0	0	0	0	1
O_NE	!=	1	0	1	0	1
O_SUB	-	1	0	1	0	1
V_INTEGER	1	0	0	0	0	1
RPARENT	)	0	0	0	0	1
V_ID	fun	8	1	-1	-1	2
LPARENT	(	0	0	0	0	2
V_ID	n	0	0	0	0	2
RPARENT	)	0	0	0	0	2
SEMICOLON	;	0	0	0	0	2
T_ELSE	else	4	1	1	-1	1
V_ID	return 	8	1	1	-1	2
SEMICOLON	;	1	0	0	0	2
RCURLYB	}	0	1	1	1	0
T_INT	int	0	1	-1	1	0
V_ID	main	1	0	1	0	0
LPARENT	(	0	0	0	0	0
RPARENT	)	0	0	0	0	0
LCURLYB	{	0	0	-1	-1	0
T_INT	int	4	1	0	1	1
V_ID	n	1	0	1	0	1
SEMICOLON	;	0	0	0	0	1
V_ID	scanf	4	1	1	1	1
LPARENT	(	0	0	0	0	1
V_STRING	"%d"	0	0	0	0	1
COMMA	,	0	0	0	0	1
O_BAND	&	0	0	1	0	1
V_ID	n	0	0	0	0	1
RPARENT	)	0	0	0	0	1
SEMICOLON	;	0	0	0	0	1
T_IF	if	4	1	1	1	1
LPARENT	(	0	0	1	0	1
V_ID	n	0	0	0	0	1
O_NE	!=	0	0	1	0	1
O_SUB	-	0	0	1	0	1
V_INTEGER	1	0	0	0	0	1
RPARENT	)	0	0	0	0	1
V_ID	fun	8	1	-1	-1	2
LPARENT	(	0	0	0	0	2
V_ID	n	0	0	0	0	2
RPARENT	)	0	0	0	0	2
SEMICOLON	;	0	0	0	0	2
T_RETURN	return	4	1	1	1	1
V_INTEGER	0	1	0	1	0	1
SEMICOLON	;	0	0	0	0	1
RCURLYB	}	0	1	1	1	0

SHARP	#	0	0	0	0	0
T_INCLUDE	include	0	0	0	0	0
O_LT	<	0	0	-1	0	0
V_IFILE	stdio.h	0	0	0	0	0
O_GT	>	0	0	0	0	0
T_STRUCT	struct	0	1	0	1	0
V_ID	stu	1	0	1	0	0
LCURLYB	{	0	1	-1	-1	0
T_INT	int	4	1	0	1	1
V_ID	a	1	0	1	0	1
SEMICOLON	;	0	0	0	0	1
T_INT	int	4	1	1	1	1
V_ID	b	1	0	1	0	1
SEMICOLON	;	0	0	0	0	1
T_INT	int	4	1	1	1	1
V_ID	c	1	0	1	0	1
SEMICOLON	;	0	0	0	0	1
T_CHAR	char	4	1	1	1	1
V_ID	name	1	0	1	0	1
LSQUAREB	[	0	0	0	0	1
V_INTEGER	100	0	0	0	0	1
RSQUAREB	]	0	0	0	0	1
SEMICOLON	;	0	0	0	0	1
RCURLYB	}	0	1	1	1	0
SEMICOLON	;	0	0	-1	-1	0
T_INT	int	0	1	1	1	0
V_ID	main	1	0	1	0	0
LPARENT	(	0	0	0	0	0
RPARENT	)	0	0	0	0	0
LCURLYB	{	0	1	-1	-1	0
T_INT	int	4	1	0	1	1
V_ID	n	1	0	1	0	1
SEMICOLON	;	0	0	0	0	1
T_STRUCT	struct	4	1	1	1	1
V_ID	stu	1	0	1	0	1
V_ID	stu	1	0	1	0	1
LSQUAREB	[	0	0	0	0	1
V_INTEGER	9	0	0	0	0	1
RSQUAREB	]	0	0	0	0	1
SEMICOLON	;	0	0	0	0	1
T_WHILE	while	4	1	1	1	1
LPARENT	(	0	0	1	0	1
O_BNOT	~	0	0	0	0	1
V_ID	scanf	0	0	0	0	1
LPARENT	(	0	0	0	0	1
V_STRING	"%d"	0	0	0	0	1
COMMA	,	0	0	0	0	1
O_BAND	&	0	0	1	0	1
V_ID	n	0	0	0	0	1
RPARENT	)	0	0	0	0	1
RPARENT	)	0	0	0	0	1
LCURLYB	{	4	1	-1	-1	1
T_IF	if	8	1	0	1	2
LPARENT	(	0	0	1	0	2
V_ID	n	0	0	0	0	2
O_EQ	==	0	0	1	0	2
O_SUB	-	0	0	1	0	2
V_INTEGER	1	0	0	0	0	2
RPARENT	)	0	0	0	0	2
V_ID	break	1	0	-1	-1	3
SEMICOLON	;	0	0	0	0	3
T_ELSE	else	8	1	1	-1	2
LCURLYB	{	8	1	-1	-1	2
T_INT	int	12	1	0	1	3
V_ID	j	1	0	1	0	3
COMMA	,	0	0	0	0	3
V_ID	k	0	0	1	0	3
COMMA	,	0	0	0	0	3
V_ID	v	0	0	1	0	3
COMMA	,	0	0	0	0	3
V_ID	i	0	0	1	0	3
COMMA	,	0	0	0	0	3
V_ID	max	0	0	1	0	3
COMMA	,	0	0	0	0	3
V_ID	min	0	0	1	0	3
SEMICOLON	;	0	0	0	0	3
T_FOR	for	12	1	1	1	3
LPARENT	(	0	0	1	0	3
V_ID	i	0	0	0	0	3
ASSIGN	=	0	0	1	0	3
V_INTEGER	0	0	0	1	0	3
SEMICOLON	;	0	0	0	0	3
V_ID	i	0	0	1	-1	3
O_LT	<	0	0	1	0	3
V_ID	n	0	0	1	0	3
SEMICOLON	;	0	0	0	0	3
V_ID	i	0	0	1	-1	3
O_SADD	++	0	0	0	0	3
RPARENT	)	0	0	0	0	3
V_ID	scanf	16	1	-1	-1	4
LPARENT	(	0	0	0	0	4
V_STRING	"%d%d%d%s"	0	0	0	0	4
COMMA	,	0	0	0	0	4
O_BAND	&	0	0	1	0	4
V_ID	stu	0	0	0	0	4
LSQUAREB	[	0	0	0	0	4
V_ID	i	0	0	0	0	4
RSQUAREB	]	0	0	0	0	4
PERIOD	.	0	0	0	0	4
V_ID	a	0	0	0	0	4
COMMA	,	0	0	0	0	4
O_BAND	&	0	0	1	0	4
V_ID	stu	0	0	0	0	4
LSQUAREB	[	0	0	0	0	4
V_ID	i	0	0	0	0	4
RSQUAREB	]	0	0	0	0	4
PERIOD	.	0	0	0	0	4
V_ID	b	0	0	0	0	4
COMMA	,	0	0	0	0	4
O_BAND	&	0	0	1	0	4
V_ID	stu	0	0	0	0	4
LSQUAREB	[	0	0	0	0	4
V_ID	i	0	0	0	0	4
RSQUAREB	]	0	0	0	0	4
PERIOD	.	0	0	0	0	4
V_ID	c	0	0	0	0	4
COMMA	,	0	0	0	0	4
O_BAND	&	0	0	1	0	4
V_ID	stu	0	0	0	0	4
LSQUAREB	[	0	0	0	0	4
V_ID	i	0	0	0	0	4
RSQUAREB	]	0	0	0	0	4
PERIOD	.	0	0	0	0	4
V_ID	name	0	0	0	0	4
RPARENT	)	0	0	0	0	4
SEMICOLON	;	0	0	0	0	4
V_ID	max	12	1	1	1	3
ASSIGN	=	0	0	1	0	3
V_ID	stu	0	0	1	0	3
LSQUAREB	[	0	0	0	0	3
V_INTEGER	0	0	0	0	0	3
RSQUAREB	]	0	0	0	0	3
PERIOD	.	0	0	0	0	3
V_ID	a	0	0	0	0	3
O_MUL	*	0	0	1	0	3
V_ID	stu	0	0	1	0	3
LSQUAREB	[	0	0	0	0	3
V_INTEGER	0	0	0	0	0	3
RSQUAREB	]	0	0	0	0	3
PERIOD	.	0	0	0	0	3
V_ID	b	0	0	0	0	3
O_MUL	*	0	0	1	0	3
V_ID	stu	0	0	1	0	3
LSQUAREB	[	0	0	0	0	3
V_INTEGER	0	0	0	0	0	3
RSQUAREB	]	0	0	0	0	3
PERIOD	.	0	0	0	0	3
V_ID	c	0	0	0	0	3
SEMICOLON	;	0	0	0	0	3
V_ID	min	12	1	1	1	3
ASSIGN	=	0	0	1	0	3
V_ID	stu	0	0	1	0	3
LSQUAREB	[	0	0	0	0	3
V_INTEGER	0	0	0	0	0	3
RSQUAREB	]	0	0	0	0	3
PERIOD	.	0	0	0	0	3
V_ID	a	0	0	0	0	3
O_MUL	*	0	0	1	0	3
V_ID	stu	0	0	1	0	3
LSQUAREB	[	0	0	0	0	3
V_INTEGER	0	0	0	0	0	3
RSQUAREB	]	0	0	0	0	3
PERIOD	.	0	0	0	0	3
V_ID	b	0	0	0	0	3
O_MUL	*	0	0	1	0	3
V_ID	stu	0	0	1	0	3
LSQUAREB	[	0	0	0	0	3
V_INTEGER	0	0	0	0	0	3
RSQUAREB	]	0	0	0	0	3
PERIOD	.	0	0	0	0	3
V_ID	c	0	0	0	0	3
SEMICOLON	;	0	0	0	0	3
V_ID	k	12	1	1	1	3
ASSIGN	=	0	0	1	0	3
V_INTEGER	0	0	0	1	0	3
SEMICOLON	;	0	0	0	0	3
V_ID	j	12	1	1	1	3
ASSIGN	=	0	0	1	0	3
V_INTEGER	0	0	0	1	0	3
SEMICOLON	;	0	0	0	0	3
T_FOR	for	12	1	1	1	3
LPARENT	(	0	0	1	0	3
V_ID	i	0	0	0	0	3
ASSIGN	=	0	0	1	0	3
V_INTEGER	1	0	0	1	0	3
SEMICOLON	;	0	0	0	0	3
V_ID	i	0	0	1	-1	3
O_LT	<	0	0	1	0	3
V_ID	n	0	0	1	0	3
SEMICOLON	;	0	0	0	0	3
V_ID	i	0	0	1	-1	3
O_SADD	++	0	0	0	0	3
RPARENT	)	0	0	0	0	3
LCURLYB	{	12	1	-1	-1	3
V_ID	v	16	1	0	1	4
ASSIGN	=	0	0	1	0	4
V_ID	stu	0	0	1	0	4
LSQUAREB	[	0	0	0	0	4
V_ID	i	0	0	0	0	4
RSQUAREB	]	0	0	0	0	4
PERIOD	.	0	0	0	0	4
V_ID	a	0	0	0	0	4
O_MUL	*	0	0	1	0	4
V_ID	stu	0	0	1	0	4
LSQUAREB	[	0	0	0	0	4
V_ID	i	0	0	0	0	4
RSQUAREB	]	0	0	0	0	4
PERIOD	.	0	0	0	0	4
V_ID	b	0	0	0	0	4
O_MUL	*	0	0	1	0	4
V_ID	stu	0	0	1	0	4
LSQUAREB	[	0	0	0	0	4
V_ID	i	0	0	0	0	4
RSQUAREB	]	0	0	0	0	4
PERIOD	.	0	0	0	0	4
V_ID	c	0	0	0	0	4
SEMICOLON	;	0	0	0	0	4
T_IF	if	16	1	1	1	4
LPARENT	(	0	0	1	0	4
V_ID	v	0	0	0	0	4
O_GT	>	0	0	1	0	4
V_ID	max	0	0	1	0	4
RPARENT	)	0	0	0	0	4
LCURLYB	{	16	1	-1	-1	4
V_ID	max	20	1	0	1	5
ASSIGN	=	0	0	1	0	5
V_ID	v	0	0	1	0	5
SEMICOLON	;	0	0	0	0	5
V_ID	k	20	1	1	1	5
ASSIGN	=	0	0	1	0	5
V_ID	i	0	0	1	0	5
SEMICOLON	;	0	0	0	0	5
RCURLYB	}	16	1	1	1	4
T_IF	if	16	1	-1	1	4
LPARENT	(	0	0	1	0	4
V_ID	v	0	0	0	0	4
O_LT	<	0	0	1	0	4
V_ID	min	0	0	1	0	4
RPARENT	)	0	0	0	0	4
LCURLYB	{	16	1	-1	-1	4
V_ID	min	20	1	0	1	5
ASSIGN	=	0	0	1	0	5
V_ID	v	0	0	1	0	5
SEMICOLON	;	0	0	0	0	5
V_ID	j	20	1	1	1	5
ASSIGN	=	0	0	1	0	5
V_ID	i	0	0	1	0	5
SEMICOLON	;	0	0	0	0	5
RCURLYB	}	16	1	1	1	4
RCURLYB	}	12	1	-1	1	3
V_ID	printf	12	1	-1	1	3
LPARENT	(	0	0	0	0	3
V_STRING	"%s took clay from %s.\n"	0	0	0	0	3
COMMA	,	0	0	0	0	3
V_ID	stu	0	0	1	0	3
LSQUAREB	[	0	0	0	0	3
V_ID	k	0	0	0	0	3
RSQUAREB	]	0	0	0	0	3
PERIOD	.	0	0	0	0	3
V_ID	name	0	0	0	0	3
COMMA	,	0	0	0	0	3
V_ID	stu	0	0	1	0	3
LSQUAREB	[	0	0	0	0	3
V_ID	j	0	0	0	0	3
RSQUAREB	]	0	0	0	0	3
PERIOD	.	0	0	0	0	3
V_ID	name	0	0	0	0	3
RPARENT	)	0	0	0	0	3
SEMICOLON	;	0	0	0	0	3
RCURLYB	}	8	1	1	1	2
RCURLYB	}	4	1	-1	1	1
T_RETURN	return	4	1	-1	1	1
V_INTEGER	0	1	0	1	0	1
SEMICOLON	;	0	0	0	0	1
RCURLYB	}	0	1	1	1	0

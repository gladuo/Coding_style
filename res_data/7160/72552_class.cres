SHARP	#	0	0	0	0	0
T_INCLUDE	include	0	0	0	0	0
O_LT	<	0	0	-1	0	0
V_IFILE	stdio.h	0	0	0	0	0
O_GT	>	0	0	0	0	0
SHARP	#	0	1	0	1	0
T_INCLUDE	include	0	0	0	0	0
O_LT	<	0	0	-1	0	0
V_IFILE	math.h	0	0	0	0	0
O_GT	>	0	0	0	0	0
T_INT	int	0	1	0	1	0
V_ID	main	1	0	1	0	0
LPARENT	(	0	0	0	0	0
RPARENT	)	0	0	0	0	0
LCURLYB	{	0	1	-1	-1	0
T_INT	int	4	1	0	1	1
V_ID	m	1	0	1	0	1
SEMICOLON	;	0	0	0	0	1
T_WHILE	while	4	1	1	1	1
LPARENT	(	0	0	1	0	1
O_BNOT	~	0	0	0	0	1
V_ID	scanf	0	0	0	0	1
LPARENT	(	0	0	0	0	1
V_STRING	"%d"	0	0	0	0	1
COMMA	,	0	0	0	0	1
O_BAND	&	0	0	1	0	1
V_ID	m	0	0	0	0	1
RPARENT	)	0	0	0	0	1
RPARENT	)	0	0	0	0	1
LCURLYB	{	4	1	-1	-1	1
T_INT	int	8	1	0	1	2
V_ID	i	1	0	1	0	2
SEMICOLON	;	0	0	0	0	2
T_INT	int	8	1	1	1	2
V_ID	flag	1	0	1	0	2
ASSIGN	=	0	0	1	0	2
V_INTEGER	0	0	0	1	0	2
SEMICOLON	;	0	0	0	0	2
T_IF	if	8	1	1	1	2
LPARENT	(	0	0	1	0	2
V_ID	m	0	0	0	0	2
O_EQ	==	1	0	1	0	2
V_INTEGER	1	0	0	1	0	2
RPARENT	)	0	0	0	0	2
V_ID	printf	0	0	-1	-1	3
LPARENT	(	0	0	0	0	3
V_STRING	"NO\n"	0	0	0	0	3
RPARENT	)	0	0	0	0	3
SEMICOLON	;	0	0	0	0	3
T_ELSE	else	8	1	1	-1	2
T_IF	if	1	0	1	-1	3
LPARENT	(	0	0	1	0	3
V_ID	m	1	0	0	0	3
O_EQ	==	0	0	1	0	3
V_INTEGER	2	0	0	1	0	3
RPARENT	)	0	0	0	0	3
V_ID	printf	0	0	-1	-1	4
LPARENT	(	0	0	0	0	4
V_STRING	"YES\n"	0	0	0	0	4
RPARENT	)	0	0	0	0	4
SEMICOLON	;	0	0	0	0	4
T_ELSE	else	8	1	1	-1	3
T_IF	if	1	0	1	-1	4
LPARENT	(	0	0	1	0	4
V_ID	m	1	0	0	0	4
O_EQ	==	0	0	1	0	4
V_INTEGER	3	0	0	1	0	4
RPARENT	)	0	0	0	0	4
V_ID	printf	0	0	-1	-1	5
LPARENT	(	0	0	0	0	5
V_STRING	"YES\n"	0	0	0	0	5
RPARENT	)	0	0	0	0	5
SEMICOLON	;	0	0	0	0	5
T_ELSE	else	8	1	1	-1	4
LCURLYB	{	8	1	-1	-1	4
T_INT	int	12	1	0	1	5
V_ID	k	1	0	1	0	5
SEMICOLON	;	0	0	0	0	5
V_ID	k	12	1	1	1	5
ASSIGN	=	0	0	1	0	5
V_ID	sqrt	0	0	1	0	5
LPARENT	(	0	0	0	0	5
V_ID	m	0	0	0	0	5
RPARENT	)	0	0	0	0	5
SEMICOLON	;	0	0	0	0	5
T_FOR	for	12	1	1	1	5
LPARENT	(	0	0	1	0	5
V_ID	i	0	0	0	0	5
ASSIGN	=	0	0	1	0	5
V_INTEGER	2	0	0	1	0	5
SEMICOLON	;	0	0	0	0	5
V_ID	i	1	0	1	-1	5
O_LE	<=	1	0	1	0	5
V_ID	k	1	0	1	0	5
SEMICOLON	;	0	0	0	0	5
V_ID	i	1	0	1	-1	5
O_SADD	++	0	0	0	0	5
RPARENT	)	0	0	0	0	5
LCURLYB	{	12	1	-1	-1	5
T_IF	if	16	1	0	1	6
LPARENT	(	0	0	1	0	6
V_ID	m	0	0	0	0	6
O_MOD	%	0	0	1	0	6
V_ID	i	0	0	1	0	6
O_EQ	==	1	0	1	0	6
V_INTEGER	0	1	0	1	0	6
RPARENT	)	0	0	0	0	6
LCURLYB	{	16	1	-1	-1	6
V_ID	flag	20	1	0	1	7
ASSIGN	=	0	0	1	0	7
V_INTEGER	1	0	0	1	0	7
SEMICOLON	;	0	0	0	0	7
V_ID	break	20	1	1	1	7
SEMICOLON	;	0	0	0	0	7
RCURLYB	}	16	1	1	1	6
RCURLYB	}	12	1	-1	1	5
T_IF	if	12	1	-1	1	5
LPARENT	(	0	0	1	0	5
V_ID	flag	0	0	0	0	5
O_EQ	==	1	0	1	0	5
V_INTEGER	1	1	0	1	0	5
RPARENT	)	0	0	0	0	5
V_ID	printf	0	0	-1	-1	6
LPARENT	(	0	0	0	0	6
V_STRING	"NO\n"	0	0	0	0	6
RPARENT	)	0	0	0	0	6
SEMICOLON	;	0	0	0	0	6
T_ELSE	else	12	1	1	-1	5
V_ID	printf	1	0	1	-1	6
LPARENT	(	0	0	0	0	6
V_STRING	"YES\n"	0	0	0	0	6
RPARENT	)	0	0	0	0	6
SEMICOLON	;	0	0	0	0	6
RCURLYB	}	8	1	1	1	4
RCURLYB	}	4	1	-1	1	1
RCURLYB	}	0	1	-1	1	0
